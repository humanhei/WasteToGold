// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define your models here
model User {
  id          String  @id @default(uuid())
  email       String?  @unique
  username    String @unique
  phone       Int? @unique
  listings    Listing[]
  wishList    Listing[] @relation("UserWishlist")
  followedBy  User[]    @relation("UserFollows")
  following   User[]    @relation("UserFollows")
  reviews     Review[]
  requests    Request[]
  status      String     @default("ACTIVE")
  createdAt   DateTime?  @default(now())
  updateAt    DateTime?  @updatedAt
}


model Category {
  id            String  @id @default(uuid())
  name_en       String  @unique
  name_zh       String  @unique
  listings      Listing[]
  subCategories SubCategory[]
  status        String     @default("ACTIVE")
}

model SubCategory {
  id          String    @id @default(uuid())
  name_en     String    @unique
  name_zh     String    @unique
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  String
  status      String     @default("ACTIVE")
}

model Listing {
  id          String      @id @default(uuid())
  sell        Boolean     @default(true)
  title_en    String?
  title_zh    String?
  category    Category?   @relation(fields: [categoryId], references: [id])
  categoryId  String?
  condition   String?
  brand       String?
  description String?
  free        Boolean     @default(false)
  price       Decimal?
  quantity    Int?
  requests    Request[]
  photos      Photo[]
  reviews     Review[]
  status      String      @default("ACTIVE")
  createdAt   DateTime?   @default(now())
  updateAt    DateTime?   @updatedAt
  wishList    User[]      @relation("UserWishlist")
  author      User        @relation(fields: [authorId], references: [id])
  authorId    String
}

model Request {
  id          String      @id @default(uuid())
  listing     Listing     @relation(fields: [listingId], references: [id])
  listingId   String
  unit        Int         @default(0)
  status      String      @default("PENDING")
  author      User        @relation(fields: [authorId], references: [id])
  authorId    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Review {
  id          String      @id @default(uuid())
  rating      Int?
  review      String?
  listing     Listing     @relation(fields: [listingId], references: [id])
  listingId   String
  status      String      @default("ACTIVE")
  author      User        @relation(fields: [authorId], references: [id])
  authorId    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Photo {
  id            Int         @id @default(autoincrement())
  fileName      String
  originalName  String
  s3Url         String
  mimeType      String
  listing       Listing     @relation(fields: [listingId], references: [id])
  listingId     String
  status        String     @default("ACTIVE")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}